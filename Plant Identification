import numpy as np
import tensorflow as tf
import itertools
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation,Dense,Flatten,BatchNormalization,Conv2D,MaxPool2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.metrics import categorical_crossentropy
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img,img_to_array
from sklearn.metrics import confusion_matrix
import os
import shutil
import glob
import matplotlib.pyplot as plt
import warnings
warnings.simplefilter(action='ignore',category=FutureWarning)
%matplotlib inline
import random
train_path=r'C:\Users\Yasha B P\Yasha\Untitled Folder\KagglePlantIdent\train'
valid_path=r'C:\Users\Yasha B P\Yasha\Untitled Folder\KagglePlantIdent\valid'
test_path=r'C:\Users\Yasha B P\Yasha\Untitled Folder\KagglePlantIdent\test'
train_batches=ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input).flow_from_directory(
    directory=train_path,target_size=(224,224),batch_size=5)
valid_batches=ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input).flow_from_directory(
    directory=valid_path,target_size=(224,224),batch_size=5)
test_batches=ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input).flow_from_directory(
    directory=test_path,target_size=(224,224),batch_size=5,shuffle=False)	
mobile=tf.keras.applications.mobilenet.MobileNet()
mobile.summary()
x=Flatten()(mobile.layers[-6].output)
output=Dense(units=11,activation='softmax')(x)
model=keras.Model(inputs=mobile.input,outputs=output)
for layer in model.layers[:-23]:
    layer.trainable=False
model.summary()
model.compile(optimizer=Adam(learning_rate=0.0001),loss='categorical_crossentropy',metrics=['accuracy'])
from keras.callbacks import ModelCheckpoint
filepath = 'flowmobnet_model.h5'
checkpoint = ModelCheckpoint(filepath=filepath, 
                           monitor='val_accuracy',min_delta=0.01,patience=3,verbose=1, 
                             save_best_only=True,
                             mode='auto')
callbacks = [checkpoint]
history = model.fit_generator(train_batches,
                  steps_per_epoch=len(train_batches),
            validation_data=valid_batches,
            validation_steps=len(valid_batches),
            epochs=30,
            verbose=2,
                  callbacks=callbacks)
from keras.models import load_model
model=load_model(r"C:\Users\Yasha B P\Yasha\Untitled Folder\kaggleplantidentmobilenet_model.h5")model=load_model(r"C:\Users\Yasha B P\Yasha\Untitled Folder\flowmobnet_model.h5")
acc=model.evaluate(valid_batches)[1]
acc
import pandas as pd
from pandasql import sqldf
d1=pd.read_excel('plant_desc.xlsx')
mysql = lambda q: sqldf(q, globals())
ref=dict(zip(list(train_batches.class_indices.values()),list(train_batches.class_indices.keys())))
def prediction(path):
    img=load_img(path,target_size=(224,224))
    i=img_to_array(img) 
    im=tf.keras.applications.mobilenet.preprocess_input(i)
    img=np.expand_dims(im,axis=0)
    pred=np.argmax(model.predict(img))
    res=mysql(f"SELECT Name,Desc FROM d1 WHERE Name= '{ref[pred]}';")
    print(f"This is an image of {ref[pred]}")
    print(res)
path=r'C:\Users\Yasha B P\Yasha\Untitled Folder\KagglePlantIdent\test\Tomato1.jpg'
prediction(path)
