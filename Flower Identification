For flower identification:
import numpy as np
import tensorflow as tf
import itertools
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation,Dense,Flatten,BatchNormalization,Conv2D,MaxPool2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.metrics import categorical_crossentropy
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img,img_to_array
from sklearn.metrics import confusion_matrix
import os
import shutil
import glob
import matplotlib.pyplot as plt
import warnings
warnings.simplefilter(action='ignore',category=FutureWarning)
%matplotlib inline
import random
train_path=r'C:\Users\Yasha B P\Yasha\Untitled Folder\102flowers\train'
valid_path=r'C:\Users\Yasha B P\Yasha\Untitled Folder\102flowers\valid'
test_path=r'C:\Users\Yasha B P\Yasha\Untitled Folder\102flowers\test'
train_batches=ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input).flow_from_directory(
    directory=train_path,target_size=(224,224),batch_size=5)
valid_batches=ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input).flow_from_directory(
    directory=valid_path,target_size=(224,224),batch_size=5)
test_batches=ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input).flow_from_directory(
    directory=test_path,target_size=(224,224),batch_size=5,shuffle=False)	
mobile=tf.keras.applications.mobilenet.MobileNet()
mobile.summary()
x=Flatten()(mobile.layers[-6].output)
output=Dense(units=102,activation='softmax')(x)
model=keras.Model(inputs=mobile.input,outputs=output)
for layer in model.layers[:-23]:
    layer.trainable=False
model.summary()
model.compile(optimizer=Adam(learning_rate=0.0001),loss='categorical_crossentropy',metrics=['accuracy'])
from keras.callbacks import ModelCheckpoint
filepath = 'flowmobnet_model.h5'
checkpoint = ModelCheckpoint(filepath=filepath, 
                           monitor='val_accuracy',min_delta=0.01,patience=3,verbose=1, 
                             save_best_only=True,
                             mode='auto')
callbacks = [checkpoint]
history = model.fit_generator(train_batches,
                  steps_per_epoch=len(train_batches),
            validation_data=valid_batches,
            validation_steps=len(valid_batches),
            epochs=30,
            verbose=2,
                  callbacks=callbacks)
from keras.models import load_model
model=load_model(r"C:\Users\Yasha B P\Yasha\Untitled Folder\flowmobnet_model.h5")
acc=model.evaluate(valid_batches)[1]
acc
import pandas as pd
from pandasql import sqldf
d=pd.read_excel('flow_desc.xlsx')
mysql = lambda q: sqldf(q, globals())
ref=dict(zip(list(train_batches.class_indices.values()),list(train_batches.class_indices.keys())))
def prediction(path):
    labdic={21: "fire lily", 3: "canterbury bells", 45: "bolero deep blue", 1: "pink primrose", 34: "mexican aster", 27: "prince of wales feathers", 7: "moon orchid", 16: "globe-flower", 25: "grape hyacinth", 26: "corn poppy", 79: "toad lily", 39: "siam tulip", 24: "red ginger", 67: "spring crocus", 35: "alpine sea holly", 32: "garden phlox", 10: "globe thistle", 6: "tiger lily", 93: "ball moss", 33: "love in the mist", 9: "monkshood", 102: "blackberry lily", 14: "spear thistle", 19: "balloon flower", 100: "blanket flower", 13: "king protea", 49: "oxeye daisy", 15: "yellow iris", 61: "cautleya spicata", 31: "carnation", 64: "silverbush", 68: "bearded iris", 63: "black-eyed susan", 69: "windflower", 62: "japanese anemone", 20: "giant white arum lily", 38: "great masterwort", 4: "sweet pea", 86: "tree mallow", 101: "trumpet creeper", 42: "daffodil", 22: "pincushion flower", 2: "hard-leaved pocket orchid", 54: "sunflower", 66: "osteospermum", 70: "tree poppy", 85: "desert-rose", 99: "bromelia", 87: "magnolia", 5: "english marigold", 92: "bee balm", 28: "stemless gentian", 97: "mallow", 57: "gaura", 40: "lenten rose", 47: "marigold", 59: "orange dahlia", 48: "buttercup", 55: "pelargonium", 36: "ruby-lipped cattleya", 91: "hippeastrum", 29: "artichoke", 71: "gazania", 90: "canna lily", 18: "peruvian lily", 98: "mexican petunia", 8: "bird of paradise", 30: "sweet william", 17: "purple coneflower", 52: "wild pansy", 84: "columbine", 12: "colt's foot", 11: "snapdragon", 96: "camellia", 23: "fritillary", 50: "common dandelion", 44: "poinsettia", 53: "primula", 72: "azalea", 65: "californian poppy", 80: "anthurium", 76: "morning glory", 37: "cape flower", 56: "bishop of llandaff", 60: "pink-yellow dahlia", 82: "clematis", 58: "geranium", 75: "thorn apple", 41: "barbeton daisy", 95: "bougainvillea", 43: "sword lily", 83: "hibiscus", 78: "lotus", 88: "cyclamen", 94: "foxglove", 81: "frangipani", 74: "rose", 89: "watercress", 73: "water lily", 46: "wallflower", 77: "passion flower", 51: "petunia"
    img=load_img(path,target_size=(224,224))
    i=img_to_array(img) 
    im=tf.keras.applications.mobilenet.preprocess_input(i)
    img=np.expand_dims(im,axis=0)
    pred=np.argmax(model.predict(img))
    var=int(ref[pred]) 
    flower=labdic[var].title()
    res=mysql(f"SELECT Name,Desc FROM d WHERE Name='{flower}';")
    print(f"This is an image of {flower}")
    print(res)
path="plant_img.jpg"
prediction(path)
